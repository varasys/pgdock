#!/usr/bin/env bash

export version="v0.1.1"

log_entry () {
    echo "pgdock: ${1}" 1>&2
    [ ! ${2} ] || exit ${2}
}

read -d '' help_header <<-EOF
	pgdock (${version}) https://github.com/varasys/pgdock
	    Wrapper script for postgres and pgadmin4 running in docker
EOF

source_env () {
    # parse env file supplied as ${1}
    # if directory check for Environment file in the directory
    # if a file is found it is sourced and change dir to file directory
    env_file=${1}
    case ${env_file} in
        --) unset env_file;;
        .)  env_file="./";;
    esac
    [ ! ${env_file} ] && [ -r "./Environment" ] && env_file="./Environment"
    if [[ "${env_file}" =~ / ]] && [ -d "${env_file}" ] && [ -r "${env_file}/Environment" ]; then
        env_file="${env_file}/Environment"
    fi
    if [[ "${env_file}" =~ / ]]; then
        if [ -f "${env_file}" ]; then
            log_entry "Sourcing environment file: ${env_file}"
            . ${env_file}
            cd $(dirname ${env_file})
        else
            log_entry "Invalid environment file: ${env_file}" 1
        fi
    fi
}
    
case "$(basename ${0})" in
    pgdock)
        apps=("postgres" \
              "pgadmin4" \
              "pg_archivecleanup" \
              "pg_basebackup" \
              "pg_config" \
              "pg_controldata" \
              "pg_ctl" \
              "pg_dump" \
              "pg_dumpall" \
              "pg_isready" \
              "pg_receivexlog" \
              "pg_recvlogical" \
              "pg_resetxlog" \
              "pg_restore" \
              "pg_rewind" \
              "pg_standby" \
              "pg_test_fsync" \
              "pg_test_timing" \
              "pg_upgrade" \
              "pg_xlogdump" \
              "psql" \
        )
        
        read -d '' help_pgdock <<-EOF
			${help_header}

			Usage:
			    pgdock ( -i | -u ) bin_dir
			    pgdock ( -h | -v )

			Options:
			    -i ) install script and symlinks to bin_dir
			    -u ) uninstall script and symlinks from bin_dir
			    -h ) show this help
			    -v ) print the version (${version}) to stdout

			pgdock works be creating symlinks to the pgdock script. When the
			script is executed through a symlink it refers to the \${0} environment
			variable to see what name it was called as.

			\`pgdock -i install\` installs the script and symlinks in the
			bin_dir. The script will act according to the name of the link used
			to call it.

			Type "postgres -h" or "pgadmin4 -h" to get help on running the postgres
			and pgadmin4 commands.

			All other commands function normally, except require the name of a running
			container as the first argument. For example, if there is a container named
			"my_db" running postgres, the command "postgres my_db psql -d database1"
			will run psql in the container and pass it the command line argument
			"-d database1".

			pgdock provides the following:
		EOF

        print_help () {
            echo ${help_pgdock}
            echo ${apps[@]} | tr ' ' "\n" | sort | awk '{print "  - ", $0}'
            echo
        }

        while getopts ":iuhv" flag; do
            case ${flag} in
                i ) install="true";;
                u ) uninstall="true";;
                h ) print_help 1>&2; exit 0;;
                \? ) log_entry "Invalid option: -${OPTARG}" 1;;
            esac
        done
        shift $((OPTIND-1))
        target=${1}
        if [ ! -d "${target}" ]; then
            log_entry "Invalid directory" 1
        fi
        if [ ${uninstall} ]; then
            log_entry "Uninstalling ${target}/pgdock"
            for app in $(find "${target}" -lname "pgdock"); do
                rm "${app}" && log_entry "    deleted symlink ${app}"
            done
            [ -e "${target}/pdock" ] && rm "${target}/pgdock" && log_entry "deleted ${target}/pgdock"
        fi
        if [ ${install} ]; then
            log_entry "Installing ${target}/pgdock"
            [ ! -e "${target}/pgdock" ] \
            && cp "${0}" "${target}/pgdock" \
            &&	log_entry "installed ${target}/pgdock" \
            ||	log_entry "skipping existing ${target}/pgdock"
            for app in ${apps[@]}; do
                [ ! -e "${target}/${app}" ] \
                && ln -s pgdock "${target}/${app}" \
                && log_entry "    installed symlink ${target}/${app}" \
                || log_entry "    skipping existing ${target}/${app}"
            done
        fi
        ;;
    pgadmin4)
        read -d '' help_pgadmin4 <<-EOF
			${help_header}

			Usage:
			    pgadmin4 [-a docker_args] [-bdr] [-p host_port] [env]
			    pgadmin4 -h
			    pgadmin4 -v 

			Options:
			    -a docker_args ) pass "docker_args" string to docker
			    -b ) build docker image (even if it exists)
			    -c ) run debug console (load shell instead of pgadmin4)
			    -d ) run in background (daemonize)
			    -h ) print this help to stdout
			    -p host_port ) expose pgadmin4 on host port "host_port" (ie. -p "0.0.0.0:5050")
			    -r ) reset pgadmin4 data (delete pgadmin4 docker volume)
			    -v ) print the version (${version}) to stdout

			The script automatically creates a docker image called if it doesn't
			already exist. Base images and packages are downloaded as needed. If

			On the first run the user will be prompted for an admin user
			name and password. That information and other configuration
			is persisted in a docker volume called ${PGA_CONTAINER}. Use the
			-r flag to delete/reset this volume on start.

			The following list shows the available environment variables and
			their default values. In theory, these environment variables can be
			changed to change the pgadmin4 and python versions used to build the
			docker image.
		EOF
        print_help () {
            echo ${help_pgadmin4}
            (set -o posix ; set) | grep -E 'PGA_[A-Z_]+' | sort
            echo
        }

        while getopts ":a:bcdhp:rv" flag; do
            case ${flag} in
                a ) docker_args=${OPTARG};;
                b ) force_build="true";;
                c ) docker_mode="-ti --entrypoint=ash"; docker_cmd="--login";;
                d ) docker_mode="-d";;
                h ) print_help="true";;
                p ) host_port=${OPTARG};;
                r ) reset="true";;
                v ) log_entry ${version} 0;;
                \? ) log_entry "Invalid option: -${OPTARG}" 1;;
            esac
        done
        shift $((OPTIND-1))
        source_env ${1}
        shift
        [ ${PGA_IMAGE:="pgadmin4"} ]
        [ ${PGA_IMAGE_TAG:="1.6"} ]
        [ ${PGA_CONTAINER:="${PGA_IMAGE}-${PGA_IMAGE_TAG//./_}"} ]
        [ ${PGA_DATA_DIR:=${PGA_CONTAINER}} ]
        if [[ "${PGA_DATA_DIR}" =~ / ]]; then
            PGA_DATA_DIR=$(cd $(dirname ${PGA_DATA_DIR}) && pwd)/$(basename ${PGA_DATA_DIR})
        fi
        log_entry "PGA_DATA_DIR=${PGA_DATA_DIR}"
        [ ${PGA_PYTHON_IMAGE:="python"} ]
        [ ${PGA_PYTHON_IMAGE_TAG:="3.5.2-alpine"} ]
        [ ${PGA_WHEEL:="pgadmin4-${PGA_IMAGE_TAG}-py2.py3-none-any.whl"} ]
        [ ${PGA_WHEEL_URL:="https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v${PGA_IMAGE_TAG}/pip/${PGA_WHEEL}"} ]
        [ ${PGA_DOCKER_ARGS:="--rm"} ]
        [ ${host_port:=${PGA_HOST_PORT}} ]
        [ ${print_help} ] && { print_help 1>%2; exit 0; }
        [ ${reset} ] && docker volume rm "${PGA_DATA_DIR}" 2> /dev/null && log_entry "Deleted ${PGA_DATA_DIR} docker volume"
        if [ ${force_build} ] || [ ! $(docker images -q ${PGA_IMAGE}:${PGA_IMAGE_TAG}) ]; then
            log_entry "Building ${PGA_IMAGE}:${PGA_IMAGE_TAG} docker image"
            docker build ${build_args} -t ${PGA_IMAGE}:${PGA_IMAGE_TAG} - <<-EOF
				FROM ${PGA_PYTHON_IMAGE}:${PGA_PYTHON_IMAGE_TAG}

				RUN apk \
                    --no-cache \
                    --update \
                    --upgrade \
                    add \
                        postgresql-dev \
                    --virtual .tmp \
                        build-base curl

				RUN pip install <(curl -L ${PGA_WHEEL_URL})
				RUN apk del --purge .tmp

				WORKDIR /usr/local/lib/python3.5/site-packages/pgadmin4
				RUN echo "DEFAULT_SERVER='0.0.0.0'" >> config_local.py
				RUN echo "DATA_DIR='/var/lib/pgadmin4'" >> config_local.py

				VOLUME /var/lib/pgadmin4
				RUN chown nobody:nobody /var/lib/pgadmin4
				ENV HOME /var/lib/pgadmin4

				EXPOSE 5050

				ENTRYPOINT ["/usr/local/bin/python"]
				CMD ["/usr/local/lib/python3.5/site-packages/pgadmin4/pgAdmin4.py"]
			EOF
            log_entry "\nFinished building ${PGA_IMAGE}:${PGA_IMAGE_TAG} docker image"
            docker images ${PGA_IMAGE}:${PGA_IMAGE_TAG}
            log_entry
        fi
        PGA_DOCKER_ARGS="${PGA_DOCKER_ARGS} \
                        ${docker_mode:-"-ti"} \
                        ${PGA_CONTAINER:+"--name=${PGA_CONTAINER}"} \
                        ${PGA_CONTAINER:+"--hostname=${PGA_CONTAINER}"} \
                        ${PGA_DATA_DIR:+"-v ${PGA_DATA_DIR}:/var/lib/pgadmin4"} \
                        ${PGA_HOST_PORT:+"-p ${PGA_HOST_PORT}:5050"} \
                        ${docker_args}"
        cmd="docker run ${PGA_DOCKER_ARGS} ${PGA_IMAGE}:${PGA_IMAGE_TAG} ${docker_cmd:-${@}}"
        log_entry "${cmd}"
        exec ${cmd}
        ;;
    postgres)
        [ ${PGD_IMAGE:="postgres"} ]
        [ ${PGD_IMAGE_TAG:="9.6.4-alpine"} ]
        [ ${PGD_CONTAINER_PORT:="5432"} ]

        read -d '' help_postgres <<-EOF
			${help_header}
			Usage:
			    postgres [-acdehpv] [-s secret] [-u user] [env | --] [pg_options]

			Where:
			    env is an optional file, or directory containing a file called
			    Environment, with environment variables to configure the cluster.
			    When run without an Environment file the container name will be
			    "${PGD_IMAGE}-${PGD_IMAGE_TAG//./_}", data will be persisted in a docker volume
			    called "${PGD_IMAGE}-${PGD_IMAGE_TAG//./_}", and no host ports will be exposed.

			Options:
			    -a ) arguments to pass through to docker (as a single string)
			    -c ) run debug console (load shell instead of postgres)
			    -d ) run in background (daemonize)
			    -h ) show this help
			    -p ) port_no) expose postgres on host port_no (ie. -p "0.0.0.0:5050")
			    -i ) initialize new cluster directory at env
			    -s secret) initial password for new database
			    -u user ) run database as user (must be in container password file)
			    -v ) print the version (${version}) to stdout

			The following list shows the available environment variables and
			their default values.
		EOF

        print_help () {
            echo ${help_postgres}
            env | grep "PGD_" | sort | awk '{print "    ", $0}'
            echo
        }

        initdb () {
            [ -d "${1}" ] || mkdir ${1}
            cd ${1}
            if [ -s "Environment" ]; then
                echo "Error: $1/Environment already exists" 1>&2
                exit 1
            fi
            cat > Environment <<-EOF
				# generated by pgdock ${version}
				# host paths are relative to the location of this file
				PGD_CONTAINER="$(basename $(pwd))"
				PGD_HOST_PORT="5432"
				PGD_CONTAINER_CONF_FILE="/etc/postgresql/postgresql.conf"
				PGD_HOST_DATA_DIR="./data"
				PGD_HOST_CONF_DIR="./conf"
				PGD_HOST_XLOG_DIR="./pg_xlog"
			EOF
            mkdir -p data conf pg_xlog
            ln -s /var/lib/postgresql/data/postgresql.conf conf/
        }

        while getopts ":a:cdhi:p:u:v" flag; do
            case ${flag} in
                a ) user_args=${OPTARG};;
                c ) docker_mode="-ti --entrypoint=ash"; docker_cmd="--login";;
                d ) docker_mode="-d";;
                h ) print_help; exit 0;;
                p ) port_arg=${OPTARG};;
                i ) run_init="true";;
                s ) pg_password=${OPTARG};;
                u ) pg_user=${OPTARG};;
                v ) echo ${version}; exit 0;;
                \? ) echo "Invalid option: ${OPTARG}" 1>&2; print_help; exit 1;;
            esac
        done
        arg_count=$((OPTIND-1))
        [ "${!arg_count}" = "--" ] && shift $((arg_count-1)) || shift ${arg_count}
        if [ ${run_init} ]; then
            initdb ${1};
            exit 0
        fi
        source_env ${1}
        shift
        [ ${pg_user} ] && PGD_USER="${pg_user}"
        [ ! ${PGD_CONTAINER} ] && PGD_CONTAINER=${PGD_CONTAINER:-"${PGD_IMAGE}-${PGD_IMAGE_TAG//./_}"}
        if  [ ${PGD_HOST_DATA_DIR} ]; then
            if [ ${PGD_HOST_DATA_DIR} = "." ] || [[ ${PGD_HOST_DATA_DIR} =~ / ]]; then
                mkdir -p ${PGD_HOST_DATA_DIR} && PGD_HOST_DATA_DIR=$(cd ${PGD_HOST_DATA_DIR}; pwd)
            fi
            PGD_HOST_DATA_DIR="-v ${PGD_HOST_DATA_DIR}:/var/lib/postgresql/data"
        else
            PGD_HOST_DATA_DIR="-v ${PGD_CONTAINER}:/var/lib/postgresql/data"
        fi
        if  [ ${PGD_HOST_CONF_DIR} ]; then
            if [ ${PGD_HOST_CONF_DIR} = "." ] || [[ ${PGD_HOST_CONF_DIR} =~ / ]]; then
                mkdir -p ${PGD_HOST_CONF_DIR} && PGD_HOST_CONF_DIR=$(cd ${PGD_HOST_CONF_DIR}; pwd)
            fi
            PGD_HOST_CONF_DIR="-v ${PGD_HOST_CONF_DIR}:/etc/postgresql"
        fi
        if  [ ${PGD_HOST_XLOG_DIR} ]; then
            if [ ${PGD_HOST_XLOG_DIR} = "." ] || [[ ${PGD_HOST_XLOG_DIR} =~ / ]]; then
                mkdir -p ${PGD_HOST_XLOG_DIR} && PGD_HOST_XLOG_DIR=$(cd ${PGD_HOST_XLOG_DIR}; pwd)
            fi
            PGD_HOST_XLOG_DIR="-v ${PGD_HOST_XLOG_DIR}:/var/lib/postgresql/pg_xlog \
                -e POSTGRES_INITDB_XLOGDIR=/var/lib/postgresql/pg_xlog"
        fi
        [ ${port_arg} ] || [ ${PGD_HOST_PORT} ] && PGD_HOST_PORT="-p ${port_arg:-${PGD_HOST_PORT}}:${PGD_CONTAINER_PORT}"
        docker_args="--rm \
            ${docker_mode} \
            --name ${PGD_CONTAINER} \
            --hostname ${PGD_CONTAINER} \
            ${PGD_HOST_DATA_DIR} \
            ${PGD_HOST_CONF_DIR} \
            ${PGD_HOST_XLOG_DIR} \
            ${PGD_HOST_PORT} \
            -e POSTGRES_INITDB_ARGS='--data-checksums'"

        postgres_args="--port=${PGD_CONTAINER_PORT}"
        [ ${PGD_CONTAINER_CONF_FILE} ] && postgres_args="${postgres_args} --config_file=${PGD_CONTAINER_CONF_FILE}"

        cmd="docker run ${PGD_USER:+"-u ${PGD_USER}"} ${docker_args} ${user_args} ${PGD_IMAGE}:${PGD_IMAGE_TAG} ${docker_cmd} ${postgres_args} ${@}"
        echo ${cmd}
        exec ${cmd}
        ;;
    *) # try and execute the command on the container
        command=$(basename ${0})
        print_help () {
            [ ${1} ] && echo "Error: ${1}\n"
            cat <<-EOF
				${help_header}
				Usage:
					${command} [-a docker_args] [-u user] container [${command}_args] | -h | -v

				Where:
					container: container name, config file, or directory containing Environment file
					docker_args: additional arguments to pass to docker
					${command}_args: additional argument to pass to ${command} in the container
					user: username to run the container as (default is "postgres")

				Options:
					-a ) arguments to pass to docker (as quoted string)
					-h ) show this help (help for pgdock, not ${command})
					-u ) pass "-u user" argument to docker
					-v ) print the version (${version}) to stdout

				This is the help for the pgdock wrapper script to pass commands to a
				container running postgresql. To get help for ${command} pass the help
				flag for ${command} in the args argument (ie. ${command} env --help).

				Execute \`pgdock -h\` for more information about pgdock.
			EOF
            [ ${1} ] && exit 1
        }

        while getopts ":a:hu:v" flag
        do
            case ${flag} in
                a ) user_args=${OPTARG};;
                h ) print_help; exit 0;;
                u ) pg_user="${OPTARG}";;
                v ) echo ${version} && exit 0;;
                \? ) echo "Invalid option: $OPTARG" 1>&2; print_help 1>&2; exit 1;;
            esac
        done
        arg_count=$((OPTIND-1))
        [ "${!arg_count}" = "--" ] && shift $((arg_count-1)) || shift ${arg_count}
        source_env ${1}
        shift
        [ ${pg_user} ] && PGD_USER=${pg_user}
        if [ ! ${PGD_CONTAINER:=${env_file}} ]; then
            echo "Missing container or environment error" 1>&2
            exit 1
        fi
        [ -t 0 ] && isterm="t"
        cmd="docker exec -u ${PGD_USER:-"postgres"} -${isterm}i ${user_args} ${PGD_CONTAINER} ${command} ${@}"
        echo ${cmd}
        exec ${cmd}
        ;;
esac
